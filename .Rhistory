soldprice = price ,
yearsold =timesold )
df <- rbind(df, temp_df)
}
# Borrowed from ChatGPT
# create a new column called "index" with a sequence of numbers
df <- df %>% mutate(House_ID = 1:nrow(.))
# move the "index" column to the front of the data frame
df <- df[, c("House_ID", names(df)[-ncol(df)])]
print(paste0("Page processed: ", this_page, "/", end_page))
print(paste0(location, ": 1/4: get_df_suburb: creating data frame done!"))
return(df)
}
add_distance_between <- function(lat, lon, fixed_lat, fixed_lon) {
dist <- distHaversine(c(lon, lat), c(fixed_lon, fixed_lat))
return(dist)
}
get_l_suburb_dist <- function(df_suburb, suburb_lat, suburb_lon, location) {
l_suburb <- df_suburb %>% geocode(address, method = 'arcgis', lat=latitude, long=longitude)
print(paste0(location, ": 2/4: get_l_suburb: done!"))
l_suburb_dist <- data.frame(
l_suburb, distance_to_train_station = apply(
l_suburb[,c("latitude","longitude")], 1, function(x) add_distance_between(x[1], x[2], suburb_lat, suburb_lon))
)
print(paste0(location, ": 3/4: get_l_suburb_dist: done!"))
return(l_suburb_dist)
}
export_l_suburb_dist_csv <- function(location, l_suburb_dist) {
# Writing the `l_granville_houseprice.csv` file in "~/csv_cache/"
if (!dir.exists("~/csv_cache")) {
dir.create("csv_cache")  # create directory if it doesn't exist
}
file_name <- paste0("l_", gsub("/", "_", location), "houseprice.csv")
print(file_name)
file_path <- file.path("csv_cache", file_name)  # specify file path
write.csv(l_suburb_dist, file_path, row.names = FALSE)  # export as CSV file
print(paste0(location, ": 4/4: export_l_suburb_dist_csv: done!"))
return("Result: csv export finished")
}
export_a_suburb <- function(location, suburb_lat, suburb_lon) {
df_suburb <- get_df_suburb(location)
l_suburb_dist <- get_l_suburb_dist(df_suburb, suburb_lat, suburb_lon, location)
export_l_suburb_dist_csv(location, l_suburb_dist)
print(paste0(location, ": Finish csv export"))
}
export_a_suburb("2122/eastwood/", -33.7899, 151.0821)
# House scraping: get_df_suburb
get_df_suburb <- function(location = "2151/Parramatta/"){
# adapted from https://embracingtherandom.com/r/web-scraping/rent-scraping/
# determine how many pages to scroll through
url <- paste0("https://www.auhouseprices.com/sold/list/NSW/",
location,
"1/?type=townhouse&ymin=0&ymax=0&bmin=0&bmax=0&pmin=0&pmax=0&sort=date&kw=") # type set to townhouse, no other filtering
webpage <- read_html(url)
# get the number of properties and the number of property displayed on each page
find_page_number <- webpage  %>%  html_nodes("h2") %>%  html_text()
find_page_number <- find_page_number[1]
numbers <- as.numeric(regmatches(find_page_number, gregexpr("[0-9]+", find_page_number))[[1]])
end_page <- ceiling(numbers[3] / numbers[2]) # number of total properties / number on page  = total number of pages
df <- NULL
print(paste0(location, ": begins 0/4"))
print(paste0( "Current suburb: ", location) )
print(paste0( "Total pages ", end_page) )
for (this_page in c(1:end_page)){
# print(paste0( "Processing page ", this_page) )
if (this_page %% 5 == 0){
print(paste0("Page processed: ", this_page, "/", end_page))
}
# get website text
url <- paste0("https://www.auhouseprices.com/sold/list/NSW/",
location,
this_page,
"/?type=townhouse&ymin=0&ymax=0&bmin=0&bmax=0&pmin=0&pmax=0&sort=date&kw=") # type set to townhouse, no other filtering
webpage <- read_html(url)
result <- webpage  %>%  html_nodes("li") %>%  html_text()
# end of the relevant content
result <-  result[ 1: grep("current", result) ]
# remove the redundant "listed price"
result <-  result[ !grepl("List", result) ]
# remove the price listed with rent
result <-  result[ !grepl("Rent", result) ]
# filter information on price and number of bedroom/bathroom/carspace
price_bedroom  <- result[ grep("\\$", result)]
price_bedroom <- strsplit( price_bedroom , "\\$")
bedroom <- lapply(price_bedroom, `[`, 1)
bedroom <- strsplit(unlist( trimws( bedroom) ) , "\\s+")
price <-  lapply(price_bedroom, `[`, 2)
price <- trimws(price)
price <- as.numeric(gsub(",","", price ))
# filter information on sold month and year
# note sometimes the price is not listed , therefore only get the ones with the price
timesold  <- result[ grep("\\$", result)-1]
timesold <-  trimws( gsub("Sold on","", timesold ))
# whether to use day month year or just month year
timesold <- lapply(timesold , function(x){
check_format <- strsplit(x, "\\s")
if (length(check_format[[1]]) == 3){
x <- dmy(x)
}else if (length(check_format[[1]]) == 2){
x <- my(x)
}else{
x <-  as.Date(paste0(x, "-01-01"))
}
x
})
timesold <- do.call("c", timesold)
# get address of these properties
address <- webpage  %>%  html_nodes("h4") %>%  html_text()
# end of the relevant content
address <-  address[ 1: grep("Auction History", address) -1 ]
#decide which address contain sold price
sold_info <- grep("Sold on", result) #entry with sold info
price_info <- grep("\\$", result) #entry with price info
contain_price <- sold_info  %in% c(price_info-1) #for every sold entry, the immediate next row should be price, if not, then this sold entry does not have price record
address <- address[contain_price] #only record those property that has price recorded
temp_df <- data.frame( address = address,
bedroom = as.numeric( unlist( lapply( bedroom, `[`, 1) ) ) ,
bathroom = as.numeric(  unlist( lapply( bedroom, `[`, 2) )) ,
carspace =  as.numeric( unlist( lapply( bedroom, `[`, 3) )),
soldprice = price ,
yearsold =timesold )
df <- rbind(df, temp_df)
}
# Borrowed from ChatGPT
# create a new column called "index" with a sequence of numbers
df <- df %>% mutate(House_ID = 1:nrow(.))
# move the "index" column to the front of the data frame
df <- df[, c("House_ID", names(df)[-ncol(df)])]
print(paste0("Page processed: ", this_page, "/", end_page))
print(paste0(location, ": 1/4: get_df_suburb: creating data frame done!"))
return(df)
}
add_distance_between <- function(lat, lon, fixed_lat, fixed_lon) {
dist <- distHaversine(c(lon, lat), c(fixed_lon, fixed_lat))
return(dist)
}
get_l_suburb_dist <- function(df_suburb, suburb_lat, suburb_lon, location) {
l_suburb <- df_suburb %>% geocode(address, method = 'arcgis', lat=latitude, long=longitude)
print(paste0(location, ": 2/4: get_l_suburb: done!"))
l_suburb_dist <- data.frame(
l_suburb, distance_to_train_station = apply(
l_suburb[,c("latitude","longitude")], 1, function(x) add_distance_between(x[1], x[2], suburb_lat, suburb_lon))
)
print(paste0(location, ": 3/4: get_l_suburb_dist: done!"))
return(l_suburb_dist)
}
export_l_suburb_dist_csv <- function(location, l_suburb_dist) {
# Writing the `l_granville_houseprice.csv` file in "~/csv_cache/"
if (!dir.exists("~/csv_cache")) {
dir.create("csv_cache")  # create directory if it doesn't exist
}
file_name <- paste0("l_", gsub("/", "_", location), "houseprice.csv")
print(file_name)
file_path <- file.path("csv_cache", file_name)  # specify file path
write.csv(l_suburb_dist, file_path, row.names = FALSE)  # export as CSV file
print(paste0(location, ": 4/4: export_l_suburb_dist_csv: done!"))
return("Result: csv export finished")
}
export_a_suburb <- function(location, suburb_lat, suburb_lon) {
df_suburb <- get_df_suburb(location)
l_suburb_dist <- get_l_suburb_dist(df_suburb, suburb_lat, suburb_lon, location)
export_l_suburb_dist_csv(location, l_suburb_dist)
print(paste0(location, ": Finish csv export"))
}
export_a_suburb("2122/eastwood/", -33.7899, 151.0821)
library(tidygeocoder)
library(tidyverse)
library(broom)
library(dplyr)
library(rafalib)
library(plotly)
library(rvest)
library(lubridate)
library(geosphere)
setwd("~/DATA1901_Project_2")
getwd()
# House scraping: get_df_suburb
get_df_suburb <- function(location = "2151/Parramatta/"){
# adapted from https://embracingtherandom.com/r/web-scraping/rent-scraping/
# determine how many pages to scroll through
url <- paste0("https://www.auhouseprices.com/sold/list/NSW/",
location,
"1/?type=townhouse&ymin=0&ymax=0&bmin=0&bmax=0&pmin=0&pmax=0&sort=date&kw=") # type set to townhouse, no other filtering
webpage <- read_html(url)
# get the number of properties and the number of property displayed on each page
find_page_number <- webpage  %>%  html_nodes("h2") %>%  html_text()
find_page_number <- find_page_number[1]
numbers <- as.numeric(regmatches(find_page_number, gregexpr("[0-9]+", find_page_number))[[1]])
end_page <- ceiling(numbers[3] / numbers[2]) # number of total properties / number on page  = total number of pages
df <- NULL
print(paste0(location, ": begins 0/4"))
print(paste0( "Current suburb: ", location) )
print(paste0( "Total pages ", end_page) )
for (this_page in c(1:end_page)){
# print(paste0( "Processing page ", this_page) )
if (this_page %% 5 == 0){
print(paste0("Page processed: ", this_page, "/", end_page))
}
# get website text
url <- paste0("https://www.auhouseprices.com/sold/list/NSW/",
location,
this_page,
"/?type=townhouse&ymin=0&ymax=0&bmin=0&bmax=0&pmin=0&pmax=0&sort=date&kw=") # type set to townhouse, no other filtering
webpage <- read_html(url)
result <- webpage  %>%  html_nodes("li") %>%  html_text()
# end of the relevant content
result <-  result[ 1: grep("current", result) ]
# remove the redundant "listed price"
result <-  result[ !grepl("List", result) ]
# remove the price listed with rent
result <-  result[ !grepl("Rent", result) ]
# filter information on price and number of bedroom/bathroom/carspace
price_bedroom  <- result[ grep("\\$", result)]
price_bedroom <- strsplit( price_bedroom , "\\$")
bedroom <- lapply(price_bedroom, `[`, 1)
bedroom <- strsplit(unlist( trimws( bedroom) ) , "\\s+")
price <-  lapply(price_bedroom, `[`, 2)
price <- trimws(price)
price <- as.numeric(gsub(",","", price ))
# filter information on sold month and year
# note sometimes the price is not listed , therefore only get the ones with the price
timesold  <- result[ grep("\\$", result)-1]
timesold <-  trimws( gsub("Sold on","", timesold ))
# whether to use day month year or just month year
timesold <- lapply(timesold , function(x){
check_format <- strsplit(x, "\\s")
if (length(check_format[[1]]) == 3){
x <- dmy(x)
}else if (length(check_format[[1]]) == 2){
x <- my(x)
}else{
x <-  as.Date(paste0(x, "-01-01"))
}
x
})
timesold <- do.call("c", timesold)
# get address of these properties
address <- webpage  %>%  html_nodes("h4") %>%  html_text()
# end of the relevant content
address <-  address[ 1: grep("Auction History", address) -1 ]
#decide which address contain sold price
sold_info <- grep("Sold on", result) #entry with sold info
price_info <- grep("\\$", result) #entry with price info
contain_price <- sold_info  %in% c(price_info-1) #for every sold entry, the immediate next row should be price, if not, then this sold entry does not have price record
address <- address[contain_price] #only record those property that has price recorded
temp_df <- data.frame( address = address,
bedroom = as.numeric( unlist( lapply( bedroom, `[`, 1) ) ) ,
bathroom = as.numeric(  unlist( lapply( bedroom, `[`, 2) )) ,
carspace =  as.numeric( unlist( lapply( bedroom, `[`, 3) )),
soldprice = price ,
yearsold =timesold )
df <- rbind(df, temp_df)
}
# Borrowed from ChatGPT
# create a new column called "index" with a sequence of numbers
df <- df %>% mutate(House_ID = 1:nrow(.))
# move the "index" column to the front of the data frame
df <- df[, c("House_ID", names(df)[-ncol(df)])]
print(paste0("Page processed: ", this_page, "/", end_page))
print(paste0(location, ": 1/4: get_df_suburb: creating data frame done!"))
return(df)
}
add_distance_between <- function(lat, lon, fixed_lat, fixed_lon) {
dist <- distHaversine(c(lon, lat), c(fixed_lon, fixed_lat))
return(dist)
}
get_l_suburb_dist <- function(df_suburb, suburb_lat, suburb_lon, location) {
l_suburb <- df_suburb %>% geocode(address, method = 'arcgis', lat=latitude, long=longitude)
print(paste0(location, ": 2/4: get_l_suburb: done!"))
l_suburb_dist <- data.frame(
l_suburb, distance_to_train_station = apply(
l_suburb[,c("latitude","longitude")], 1, function(x) add_distance_between(x[1], x[2], suburb_lat, suburb_lon))
)
print(paste0(location, ": 3/4: get_l_suburb_dist: done!"))
return(l_suburb_dist)
}
export_l_suburb_dist_csv <- function(location, l_suburb_dist) {
# Writing the `l_granville_houseprice.csv` file in "~/csv_cache/"
if (!dir.exists("~/csv_cache")) {
dir.create("csv_cache")  # create directory if it doesn't exist
}
file_name <- paste0("l_", gsub("/", "_", location), "houseprice.csv")
print(file_name)
file_path <- file.path("csv_cache", file_name)  # specify file path
write.csv(l_suburb_dist, file_path, row.names = FALSE)  # export as CSV file
print(paste0(location, ": 4/4: export_l_suburb_dist_csv: done!"))
return("Result: csv export finished")
}
export_a_suburb <- function(location, suburb_lat, suburb_lon) {
df_suburb <- get_df_suburb(location)
l_suburb_dist <- get_l_suburb_dist(df_suburb, suburb_lat, suburb_lon, location)
export_l_suburb_dist_csv(location, l_suburb_dist)
print(paste0(location, ": Finish csv export"))
}
export_a_suburb("2122/eastwood/", -33.7899, 151.0821)
export_a_suburb("2144/auburn/", -33.8490, 151.0329)
export_all_suburbs <- function(file_name) {
# Read the input file
suburbs_input <- read.table(file_name, header = FALSE, sep = ",", col.names = c("location", "latitude", "longitude"), strip.white = TRUE)
# Loop through each row in the input file and call export_a_suburb function
for (i in 1:nrow(suburbs_input)) {
location <- as.character(suburbs_input[i, "location"])
latitude <- as.numeric(suburbs_input[i, "latitude"])
longitude <- as.numeric(suburbs_input[i, "longitude"])
export_a_suburb(location, latitude, longitude)
}
return(NULL)
}
export_all_suburbs("suburbs.txt")
# Exported files stored in "csv_cache/"
export_all_suburbs <- function(file_name) {
# Read the input file
suburbs_input <- read.table(file_name, header = FALSE, sep = ",", col.names = c("location", "latitude", "longitude"), strip.white = TRUE)
# Loop through each row in the input file and call export_a_suburb function
for (i in 1:nrow(suburbs_input)) {
location <- as.character(suburbs_input[i, "location"])
latitude <- as.numeric(suburbs_input[i, "latitude"])
longitude <- as.numeric(suburbs_input[i, "longitude"])
export_a_suburb(location, latitude, longitude)
}
return(NULL)
}
export_all_suburbs("suburbs.txt")
# https://sydneysuburbreviews.com/inner-west-suburb-rankings/ <-- this site was used to cover all major suburbs
# Exported files stored in "csv_cache/"
export_all_suburbs <- function(file_name) {
# Read the input file
suburbs_input <- read.table(file_name, header = FALSE, sep = ",", col.names = c("location", "latitude", "longitude"), strip.white = TRUE, comment.char = "", quote = "")
# Filter out rows starting with a '#' character
suburbs_input <- suburbs_input[!grepl("^#", suburbs_input$location), ]
# Loop through each row in the input file and call export_a_suburb function
for (i in 1:nrow(suburbs_input)) {
location <- as.character(suburbs_input[i, "location"])
latitude <- as.numeric(suburbs_input[i, "latitude"])
longitude <- as.numeric(suburbs_input[i, "longitude"])
export_a_suburb(location, latitude, longitude)
}
return(NULL)
}
# https://sydneysuburbreviews.com/inner-west-suburb-rankings/ <-- this site was used to cover all major suburbs
# Exported files stored in "csv_cache/"
library(tidygeocoder)
library(tidyverse)
library(broom)
library(dplyr)
library(rafalib)
library(plotly)
library(geosphere)
setwd("~/DATA1901_Project_2")
getwd()
# mytext <- readLines("README.md")
# cat(mytext, sep = "\n")
# Reading the `csv` files
# l_parramatta_dist <- read.csv("~/csv_cache/l_parramatta_houseprice.csv")
# l_merrylands_dist <- read.csv("~/csv_cache/l_merrylands_houseprice.csv")
l_eastwood_dist <- read.csv("csv_cache/l_2122_eastwood_houseprice.csv")
l_auburn_dist <- read.csv("csv_cache/l_2144_auburn_houseprice.csv")
# l_granville_dist <- read.csv("~/csv_cache/l_granville_houseprice.csv")
# Categorize the data set `l_parramatta_dist` into different distance categories
# l_parramatta_dist$"distance_to_train_station(km)" <- l_parramatta_dist$distance_to_train_station/1000
l_auburn_dist$"distance_to_train_station(km)" <- l_auburn_dist$distance_to_train_station/1000
# l_merrylands_dist$"distance_to_train_station(km)" <- l_merrylands_dist$distance_to_train_station/1000
l_eastwood_dist$"distance_to_train_station(km)" <- l_eastwood_dist$distance_to_train_station/1000
# l_granville_dist$"distance_to_train_station(km)" <- l_granville_dist$distance_to_train_station/1000
# # Removing that `FIRST` row of previous `dist`
# l_parramatta_dist2 <- l_parramatta_dist[, -1]
# l_eastwood_dist2 <- l_eastwood_dist[, -1]
# l_merrylands_dist2 <-l_merrylands_dist[, -1]
# l_granville_dist2 <-l_granville_dist[, -1]
# l_auburn_dist2 <-l_auburn_dist[, -1]
#
# # Writing the `csv` files into a new folder `Long Lat Dist Suburb Data`
# write.csv(l_parramatta_dist2, "~/Desktop/UNI/1st Year/DATA1901 files/Project/Project 2/Long Lat Dist Suburb Data/l_parramatta_houseprice.csv", row.names=TRUE)
#
# write.csv(l_merrylands_dist2, "~/Desktop/UNI/1st Year/DATA1901 files/Project/Project 2/Long Lat Dist Suburb Data/l_merrylands_houseprice.csv", row.names=TRUE)
#
# write.csv(l_auburn_dist2, "~/Desktop/UNI/1st Year/DATA1901 files/Project/Project 2/Long Lat Dist Suburb Data/l_auburn_houseprice.csv", row.names=TRUE)
#
# write.csv(l_eastwood_dist2, "~/Desktop/UNI/1st Year/DATA1901 files/Project/Project 2/Long Lat Dist Suburb Data/l_eastwood_houseprice.csv", row.names=TRUE)
#
# write.csv(l_granville_dist2, "~/Desktop/UNI/1st Year/DATA1901 files/Project/Project 2/Long Lat Dist Suburb Data/l_granville_houseprice.csv", row.names=TRUE)
# ggplot(l_parramatta_dist, aes(x=distance_to_train_station, y=soldprice))+
#   geom_point(aes(color=bedroom))+
#   scale_colour_gradient(low="pink")+
#   labs(title = "Sale Price of Townhouses vs Distance to Train Station", x="Distance to Local Train Station (m)", y="Sale Price ($)")+
#   theme(plot.title = element_text(hjust = 0.5))+
#   theme_linedraw()
#
# ggplot(l_merrylands_dist, aes(x=distance_to_train_station, y=soldprice))+
#   geom_point(aes(color=bedroom))+
#   scale_colour_gradient(low="blue")+
#   labs(title = "Sale Price of Townhouses vs Distance to Train Station", x="Distance to Local Train Station (m)", y="Sale Price ($)")+
#   theme(plot.title = element_text(hjust = 0.5))+
#   theme_linedraw()
ggplot(l_auburn_dist, aes(x=distance_to_train_station, y=soldprice))+
geom_point(aes(color=bedroom))+
scale_colour_gradient(low="red")+
labs(title = "Sale Price of Townhouses vs Distance to Train Station", x="Distance to Local Train Station (m)", y="Sale Price ($)")+
theme(plot.title = element_text(hjust = 0.5))+
theme_linedraw()
ggplot(l_eastwood_dist, aes(x=distance_to_train_station, y=soldprice))+
geom_point(aes(color=bedroom))+
scale_colour_gradient(low="grey")+
labs(title = "Sale Price of Townhouses vs Distance to Train Station", x="Distance to Local Train Station (m)", y="Sale Price ($)")+
theme(plot.title = element_text(hjust = 0.5))+
theme_linedraw()
# ggplot(l_granville_dist, aes(x=distance_to_train_station, y=soldprice))+
#   geom_point(aes(color=factor(bedroom)))+
#   labs(title = "Sale Price of Townhouses vs Distance to Train Station", x="Distance to Local Train Station (m)", y="Sale Price ($)")+
#   theme(plot.title = element_text(hjust = 0.5))+
#   theme_linedraw()
#
# ggplot(l_granville_dist, aes(x=distance_to_train_station, y=soldprice))+
#   geom_point(aes(color=factor(bedroom)))+
#   labs(title = "Sale Price of Townhouses vs Distance to Train Station", x="Distance to Local Train Station (m)", y="Sale Price ($)")+
#   theme(plot.title = element_text(hjust = 0.5))+
#   theme_linedraw()
ggplot(l_eastwood_dist, aes(x=bedroom[bedroom=1], y=soldprice))+
geom_boxplot()+
labs(title = "Sale Price of Townhouses vs No. of Bedrooms", x="No. of Bedrooms", y="Sale Price ($)")+
theme(plot.title = element_text(hjust = 0.5))+
theme_linedraw()
ggplot(l_eastwood_dist, aes(x=factor(bedroom), y=soldprice))+
geom_boxplot()+
labs(title = "Sale Price of Townhouses vs No. of Bedrooms", x="No. of Bedrooms", y="Sale Price ($)")+
theme(plot.title = element_text(hjust = 0.5))+
theme_linedraw()
parramatta_1bed <- filter(l_parramatta_dist, bedroom == 1, carspace == 1)
mytext <- readLines("README.md")
cat(mytext, sep = "\n")
# Reading the `csv` files
l_parramatta_dist <- read.csv("~/csv_cache/l_parramatta_houseprice.csv")
library(tidygeocoder)
library(tidyverse)
library(broom)
library(dplyr)
library(rafalib)
library(plotly)
library(geosphere)
setwd("~/DATA1901_Project_2")
getwd()
mytext <- readLines("README.md")
cat(mytext, sep = "\n")
# Reading the `csv` files
l_parramatta_dist <- read.csv("csv_cache/l_parramatta_houseprice.csv")
DME.md")
cat(mytext, sep = "\n")
mytext <- readLines("README.md")
cat(mytext, sep = "\n")
mytext <- readLines("csv_cache/l_parramatta_houseprice.csv")
mytext <- readLines("/csv_cache/l_parramatta_houseprice.csv")
# Reading the `csv` files
l_parramatta_dist <- read.csv("csv_cache/l_2150_parramatta_houseprice.csv")
# Reading the `csv` files
l_parramatta_dist <- read.csv("csv_cache/l_2150_parramatta_houseprice.csv")
l_merrylands_dist <- read.csv("csv_cache/l_2160_merrylands_houseprice.csv")
l_eastwood_dist <- read.csv("csv_cache/l_2122_eastwood_houseprice.csv")
l_auburn_dist <- read.csv("csv_cache/l_2144_auburn_houseprice.csv")
l_granville_dist <- read.csv("csv_cache/l_2142_granville_houseprice.csv")
# Categorize the data set `l_parramatta_dist` into different distance categories
l_parramatta_dist$"distance_to_train_station(km)" <- l_parramatta_dist$distance_to_train_station/1000
l_auburn_dist$"distance_to_train_station(km)" <- l_auburn_dist$distance_to_train_station/1000
l_merrylands_dist$"distance_to_train_station(km)" <- l_merrylands_dist$distance_to_train_station/1000
l_eastwood_dist$"distance_to_train_station(km)" <- l_eastwood_dist$distance_to_train_station/1000
l_granville_dist$"distance_to_train_station(km)" <- l_granville_dist$distance_to_train_station/1000
# Removing that `FIRST` row of previous `dist`
l_parramatta_dist2 <- l_parramatta_dist[, -1]
l_eastwood_dist2 <- l_eastwood_dist[, -1]
l_merrylands_dist2 <-l_merrylands_dist[, -1]
l_granville_dist2 <-l_granville_dist[, -1]
l_auburn_dist2 <-l_auburn_dist[, -1]
# Writing the `csv` files into a new folder `Long Lat Dist Suburb Data`
write.csv(l_parramatta_dist2, "~/Desktop/UNI/1st Year/DATA1901 files/Project/Project 2/Long Lat Dist Suburb Data/l_parramatta_houseprice.csv", row.names=TRUE)
# l_parramatta_dist$distance_class <- cut(l_parramatta_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
# l_merrylands_dist$distance_class <- cut(l_merrylands_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500, 3.000,3.250,3.500,3.750, 4.000))
l_auburn_dist$distance_class <- cut(l_auburn_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
l_eastwood_dist$distance_class <- cut(l_eastwood_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
l_granville_dist$distance_class <- cut(l_granville_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
ggplot(l_parramatta_dist, aes(x = distance_class, y = soldprice/100000))+
geom_boxplot() +
labs(title = "Sold price for -bedroom properties", x="Distance from Train Station(m)", y="Selling Price (x$100000)")+
theme_bw()+
theme(axis.text.x = element_text(angle=45,hjust=1))
# l_parramatta_dist$distance_class <- cut(l_parramatta_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
# l_merrylands_dist$distance_class <- cut(l_merrylands_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500, 3.000,3.250,3.500,3.750, 4.000))
l_auburn_dist$distance_class <- cut(l_auburn_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
l_eastwood_dist$distance_class <- cut(l_eastwood_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
l_granville_dist$distance_class <- cut(l_granville_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
ggplot(l_parramatta_dist, aes(x = distance_class, y = soldprice/100000))+
geom_boxplot() +
labs(title = "Sold price for -bedroom properties", x="Distance from Train Station(m)", y="Selling Price (x$100000)")+
theme_bw()+
theme(axis.text.x = element_text(angle=45,hjust=1))
l_parramatta_dist$distance_class <- cut(l_parramatta_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
l_merrylands_dist$distance_class <- cut(l_merrylands_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500, 3.000,3.250,3.500,3.750, 4.000))
l_auburn_dist$distance_class <- cut(l_auburn_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
l_eastwood_dist$distance_class <- cut(l_eastwood_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
l_granville_dist$distance_class <- cut(l_granville_dist$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500,3.000,3.250,3.500,3.750, 4.000))
ggplot(l_parramatta_dist, aes(x = distance_class, y = soldprice/100000))+
geom_boxplot() +
labs(title = "Sold price for -bedroom properties", x="Distance from Train Station(m)", y="Selling Price (x$100000)")+
theme_bw()+
theme(axis.text.x = element_text(angle=45,hjust=1))
parramatta_2bed <- filter(l_parramatta_dist, bedroom == 2, carspace == 1)
parramatta_2bed$distance_class <- cut(parramatta_2bed$"distance_to_train_station(km)",breaks=c(0,0.250,0.500,0.750,1.000,1.250,1.500,1.750,2.000,2.250,2.500))
# for 2 bedrooms, this is the boxplots after classing them by distance
ggplot(parramatta_2bed, aes(x = distance_class, y = soldprice/100000))+
geom_boxplot() +
labs(title = "Sold price for -bedroom properties", x="Distance from Train Station(m)", y="Selling Price (x$100000)")+
theme_bw()+
theme(axis.text.x = element_text(angle=45,hjust=1))
summary(parramatta_2bed)
